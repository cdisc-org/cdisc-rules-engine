from typing import Dict, List, Type, Iterable

from cdisc_rules_engine.enums.report_types import ReportTypes
from cdisc_rules_engine.interfaces import DataServiceInterface
from cdisc_rules_engine.models.rule_validation_result import RuleValidationResult
from cdisc_rules_engine.models.validation_args import Validation_args

from .base_report import BaseReport
from .excel_report import ExcelReport
from .json_report import JsonReport


class ReportFactory:
    """
    This class is a factory that creates reporting service depending on
    the output format.

    Constructor arguments:
    data_path -- path to the output file
    results -- list with rule results generated by the engine
    elapsed_time -- time spent on validation
    args -- CLI arguments for the validate command
    data_service -- instance of engine data service to read file contents
    """

    def __init__(
        self,
        datasets: Iterable[dict],
        results: List[RuleValidationResult],
        elapsed_time: float,
        args: Validation_args,
        data_service: DataServiceInterface,
    ):
        self._datasets = datasets
        self._dataset_paths = [dataset.get("full_path") for dataset in datasets]
        self._results = results
        self._elapsed_time = elapsed_time
        self._args = args
        self._data_service = data_service
        self._output_type_service_map: Dict[str, Type[BaseReport]] = {
            ReportTypes.XLSX.value: ExcelReport,
            ReportTypes.JSON.value: JsonReport,
        }

    def get_report_services(self) -> List[BaseReport]:
        services: List[BaseReport] = []
        for output_type in self._args.output_format:
            output_type: str = output_type.upper()
            service_class: Type[BaseReport] = self._output_type_service_map[output_type]
            instance: BaseReport = service_class(
                self._datasets,
                self._dataset_paths,
                self._results,
                self._elapsed_time,
                self._args,
                self._data_service.read_data(self._args.report_template),
            )
            services.append(instance)
        return services

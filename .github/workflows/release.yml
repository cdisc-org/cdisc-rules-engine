name: Release CORE Rules Engine

on:
  release:
    types: [created]

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            name: "core-ubuntu-latest"
          - os: "ubuntu-20.04"
            name: "core-ubuntu-20-04"
          - os: "macos-latest"
            name: "core-mac"
          - os: "windows-latest"
            name: "core-windows"
    uses: ./.github/workflows/build-binary.yml
    with:
      os: ${{ matrix.os }}
      name: ${{ matrix.name }}

  create-release-assets:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create release zip files
        uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-ubuntu-latest/
          dest: core-ubuntu-latest.zip
      - uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-ubuntu-20-04/
          dest: core-ubuntu-20-04.zip
      - uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-mac/
          dest: core-mac.zip
      - uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-windows/
          dest: core-windows.zip

      - name: Upload Ubuntu Latest Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./core-ubuntu-latest.zip
          asset_name: core-ubuntu-latest.zip
          asset_content_type: application/zip
      - name: Upload Ubuntu 20.04 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./core-ubuntu-20-04.zip
          asset_name: core-ubuntu-20-04.zip
          asset_content_type: application/zip
      - name: Upload Mac Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./core-mac.zip
          asset_name: core-mac.zip
          asset_content_type: application/zip
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./core-windows.zip
          asset_name: core-windows.zip
          asset_content_type: application/zip

      # Upload zips as artifact for the PyPI job
      - name: Upload Release Assets for PyPI
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            core-ubuntu-latest.zip
            core-ubuntu-20-04.zip
            core-mac.zip
            core-windows.zip

  deploy-to-pypi:
    needs: create-release-assets
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # For trusted publishing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download binary releases
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: binary-releases

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install -r requirements.txt

      - name: Create releases directory inside package
        run: |
          mkdir -p core_rules_engine/releases
          cp binary-releases/*.zip core_rules_engine/releases/
          ls -la core_rules_engine/releases/

      - name: Update version in version.py
        run: |
          # Extract version from GitHub release tag (without 'v' prefix if it exists)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "Using version: $VERSION"

          # Update version in version.py
          echo "__version__ = \"$VERSION\"" > version.py

          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml

          # Display the updated files for verification
          cat version.py
          cat pyproject.toml | grep version

      - name: Verify package resources
        run: |
          # Check that required directories exist
          for dir in "core_rules_engine/resources/cache" "core_rules_engine/resources/templates" "core_rules_engine/resources/schema"; do
            if [ ! -d "$dir" ]; then
              echo "WARNING: Directory $dir does not exist. Creating it..."
              mkdir -p "$dir"
            else
              echo "âœ“ Directory $dir exists"
              ls -la "$dir" || echo "Could not list contents"
            fi
          done

      - name: Build package
        run: python -m build

      - name: Check package contents
        run: |
          # List contents of the built package to verify binaries and resources
          echo "Listing wheel contents:"
          pip install wheel
          unzip -l dist/*.whl | grep -E "resources|releases"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

      - name: Verify published package is installable
        run: |
          # Extract version from GitHub release tag
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}

          # Wait for PyPI to process the upload
          echo "Waiting for PyPI to process the package..."
          sleep 60

          # Try to install the package
          pip install "core-rules-engine==$VERSION" || echo "Package verification skipped - package might not be available yet"

name: Test Release CORE Rules Engine

on:
  workflow_dispatch:

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            name: "core-ubuntu-latest"
          - os: "ubuntu-20.04"
            name: "core-ubuntu-20-04"
          - os: "macos-latest"
            name: "core-mac"
          - os: "windows-latest"
            name: "core-windows"
    uses: ./.github/workflows/build-binary.yml
    with:
      os: ${{ matrix.os }}
      name: ${{ matrix.name }}

  create-release-assets:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create individual release zip files
        uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-ubuntu-latest/
          dest: core-ubuntu-latest.zip
      - uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-ubuntu-20-04/
          dest: core-ubuntu-20-04.zip
      - uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-mac/
          dest: core-mac.zip
      - uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-windows/
          dest: core-windows.zip
      - name: Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            core-ubuntu-latest.zip
            core-ubuntu-20-04.zip
            core-mac.zip
            core-windows.zip

  deploy-to-testpypi:
    needs: create-release-assets
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download binary releases
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: binary-releases

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install -r requirements.txt

      - name: Create releases directory inside package
        run: |
          mkdir -p core_rules_engine/releases
          cp binary-releases/*.zip core_rules_engine/releases/
          ls -la core_rules_engine/releases/

      - name: Set up resources structure
        run: |
          # Create top-level resources directory structure (where code is looking)
          mkdir -p resources/cache resources/templates resources/schema tests/resources/datasets

          # Copy any existing resource files
          cp -r core_rules_engine/resources/cache/* resources/cache/ || true
          cp -r core_rules_engine/resources/templates/* resources/templates/ || true
          cp -r core_rules_engine/resources/schema/* resources/schema/ || true

          # Verify the resources directories are set up
          echo "Resources directory structure:"
          find resources -type d | sort

      - name: Verify all resources exist
        run: |
          echo "Checking all required resources..."
          test -d resources/cache || (echo "Missing resources/cache directory" && exit 1)
          test -d resources/templates || (echo "Missing resources/templates directory" && exit 1)
          test -d resources/schema || (echo "Missing resources/schema directory" && exit 1)
          test -d tests/resources/datasets || (echo "Missing tests/resources/datasets directory"

      - name: Build package
        run: python -m build

      - name: Check package contents thoroughly
        run: |
          echo "Listing wheel contents:"
          pip install wheel
          mkdir -p wheel-extract
          unzip -d wheel-extract dist/*.whl

          echo "Looking for resources directories:"
          find wheel-extract -name "resources" -type d

          echo "Resource files included:"
          find wheel-extract -path "*/resources/*" | sort

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

      - name: Extract version from pyproject.toml
        run: |
          # Extract version from pyproject.toml using grep and cut
          VERSION=$(grep 'version =' pyproject.toml | head -1 | cut -d '"' -f 2)
          echo "Package version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Verify installation from TestPyPI
        run: |
          # Wait for TestPyPI to process the upload
          echo "Waiting for TestPyPI to process the package..."
          sleep 30

          echo "Attempting to install cdisc-rules-engine version $VERSION from TestPyPI..."

          # Try to install from TestPyPI
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "cdisc-rules-engine==$VERSION" || echo "Installation verification skipped - package might not be available yet"

          # Verify it installed correctly if possible
          if pip list | grep "cdisc-rules-engine"; then
            echo "Package installed successfully!"
            # Try importing it
            python -c "import core_rules_engine; print('Import successful')" || echo "Import failed but package was installed"
          else
            echo "Package installation couldn't be verified."
          fi

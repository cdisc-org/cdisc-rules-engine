name: Build Binary
on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      name:
        required: true
        type: string
jobs:
  build:
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        id: pysetup
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          pip install --no-deps -r requirements.txt
          pip install -r requirements.txt --no-cache-dir

      - name: Build Binary (Linux/Mac)
        if: runner.os != 'Windows'
        run: pyinstaller --onedir --contents-directory "." core.py --dist ./dist/output/${{ inputs.name }} --collect-submodules pyreadstat --add-data=$pythonLocation/lib/python3.10/site-packages/xmlschema/schemas:xmlschema/schemas --add-data=resources/cache:resources/cache --add-data=resources/templates:resources/templates --add-data=resources/schema:resources/schema --add-data=tests/resources/datasets:tests/resources/datasets
      - name: Build Binary (Windows)
        if: runner.os == 'Windows'
        run: pyinstaller --onedir --contents-directory "." core.py --dist ./dist/output/${{ inputs.name }} --collect-submodules pyreadstat --collect-all numpy --add-data="$env:pythonLocation\Lib\site-packages\xmlschema\schemas;xmlschema/schemas" --hidden-import numpy --hidden-import numpy.core._methods --hidden-import numpy.lib.format --add-data="resources/cache;resources/cache" --add-data="resources/templates;resources/templates" --add-data="resources/schema;resources/schema"  --add-data="tests/resources/datasets;tests/resources/datasets" --add-binary="$env:pythonLocation\Lib\site-packages\numpy\.libs\*.dll;."
      - name: Archive Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.name }}
          path: dist/output/${{ inputs.name }}/
      - name: Test Binary help command
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            if ./core.exe --help; then echo "test passed"; else echo "test failed"; exit 1; fi
          else
            chmod +x core
            if ./core --help; then echo "test passed"; else echo "test failed"; exit 1; fi
          fi
        shell: bash
      - name: Test Binary test-validate command
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            ./core.exe test-validate
          else
            chmod +x core
            chmod -R 755 .
            chmod -R +r resources/
            ./core test-validate
          fi
          exit_code=$?
          if [ $exit_code -eq 0 ]; then
            echo "Test validate succeeded"
          else
            echo "Test validate failed with exit code $exit_code"
          fi
        shell: bash

import pytest
from cdisc_rules_engine.constants.metadata_columns import (
    SOURCE_FILENAME,
    SOURCE_ROW_NUMBER,
)
from cdisc_rules_engine.dataset_builders.contents_dataset_builder import (
    ContentsDatasetBuilder,
)
from unittest.mock import MagicMock
from cdisc_rules_engine.models.library_metadata_container import (
    LibraryMetadataContainer,
)
from cdisc_rules_engine.services.data_services import DummyDataService
from cdisc_rules_engine.dummy_models.dummy_dataset import DummyDataset
from cdisc_rules_engine.models.rule_conditions import ConditionCompositeFactory
from conftest import mock_data_service
from cdisc_rules_engine.utilities.rule_processor import RuleProcessor
from cdisc_rules_engine.services.cache.in_memory_cache_service import (
    InMemoryCacheService,
)
from cdisc_rules_engine.models.dataset import PandasDataset
import pandas as pd
import json

with open(r"tests/resources/CoreIssue499/data.json", "r") as file:
    test_data = json.load(file)


@pytest.mark.parametrize(
    "conditions",
    [
        {
            "not": {
                "any": [
                    {
                        "value": {
                            "target": "dataset_label",
                            "comparator": "Adverse Events",
                        },
                        "operator": "equal_to",
                    },
                    {
                        "all": [
                            {
                                "value": {
                                    "target": "dataset_size",
                                    "unit": "MB",
                                    "comparator": 5,
                                },
                                "operator": "less_than",
                            },
                        ]
                    },
                ]
            }
        },
    ],
)
def test_ContentDatasetBuilder_split_datasets(conditions):

    rule: dict = {
        "conditions": ConditionCompositeFactory.get_condition_composite(conditions),
    }
    processor = RuleProcessor(mock_data_service, InMemoryCacheService())
    data_metadata = test_data
    datasets = [DummyDataset(data) for data in data_metadata.get("datasets", [])]
    expected_output = {
        "STUDYID": {
            "0": "CDISCCORE01",
            "1": "CDISCCORE01",
            "2": "CDISCCORE01",
            "3": "CDISCCORE01",
            "4": "CDISCCORE01",
            "5": "CDISCCORE01",
            "6": "CDISCCORE01",
            "7": "CDISCCORE01",
            "8": "CDISCCORE01",
            "9": "CDISCCORE01",
            "10": "CDISCCORE01",
            "11": "CDISCCORE01",
            "12": "CDISCCORE01",
            "13": "CDISCCORE01",
            "14": "CDISCCORE01",
            "15": "CDISCCORE01",
            "16": "CDISCCORE01",
            "17": "CDISCCORE01",
            "18": "CDISCCORE01",
            "19": "CDISCCORE01",
            "20": "CDISCCORE01",
            "21": "CDISCCORE01",
            "22": "CDISCCORE01",
            "23": "CDISCCORE01",
            "24": "CDISCCORE01",
            "25": "CDISCCORE01",
            "26": "CDISCCORE01",
            "27": "CDISCCORE01",
        },
        "DOMAIN": {
            "0": "SS",
            "1": "SS",
            "2": "SS",
            "3": "SS",
            "4": "SS",
            "5": "SS",
            "6": "SS",
            "7": "SS",
            "8": "SS",
            "9": "SS",
            "10": "SS",
            "11": "SS",
            "12": "SS",
            "13": "SS",
            "14": "SS",
            "15": "SS",
            "16": "SS",
            "17": "SS",
            "18": "SS",
            "19": "SS",
            "20": "SS",
            "21": "SS",
            "22": "SS",
            "23": "SS",
            "24": "SS",
            "25": "SS",
            "26": "SS",
            "27": "SS",
        },
        "USUBJID": {
            "0": "0001",
            "1": "0001",
            "2": "0001",
            "3": "0001",
            "4": "0001",
            "5": "0001",
            "6": "0001",
            "7": "0002",
            "8": "0002",
            "9": "0002",
            "10": "0002",
            "11": "0002",
            "12": "0002",
            "13": "0002",
            "14": "0001",
            "15": "0001",
            "16": "0001",
            "17": "0001",
            "18": "0001",
            "19": "0001",
            "20": "0001",
            "21": "0002",
            "22": "0002",
            "23": "0002",
            "24": "0002",
            "25": "0002",
            "26": "0002",
            "27": "0002",
        },
        "SSSEQ": {
            "0": 1,
            "1": 2,
            "2": 3,
            "3": 4,
            "4": 5,
            "5": 6,
            "6": 7,
            "7": 1,
            "8": 1,
            "9": 3,
            "10": 4,
            "11": 5,
            "12": 6,
            "13": 7,
            "14": 8,
            "15": 9,
            "16": 10,
            "17": 11,
            "18": 12,
            "19": 13,
            "20": 14,
            "21": 8,
            "22": 9,
            "23": 10,
            "24": 11,
            "25": 12,
            "26": 13,
            "27": 14,
        },
        "SSTESTCD": {
            "0": "SURVSTAT",
            "1": "SURVSTAT",
            "2": "SURVSTAT",
            "3": "SURVSTAT",
            "4": "SURVSTAT",
            "5": "SURVSTAT",
            "6": "SURVSTAT",
            "7": "SURVSTAT",
            "8": "SURVSTAT",
            "9": "SURVSTAT",
            "10": "SURVSTAT",
            "11": "SURVSTAT",
            "12": "SURVSTAT",
            "13": "SURVSTAT",
            "14": "SURVSTAT",
            "15": "SURVSTAT",
            "16": "SURVSTAT",
            "17": "SURVSTAT",
            "18": "SURVSTAT",
            "19": "SURVSTAT",
            "20": "SURVSTAT",
            "21": "SURVSTAT",
            "22": "SURVSTAT",
            "23": "SURVSTAT",
            "24": "SURVSTAT",
            "25": "SURVSTAT",
            "26": "SURVSTAT",
            "27": "SURVSTAT",
        },
        "SSTEST": {
            "0": "Survival Status",
            "1": "Survival Status",
            "2": "Survival Status",
            "3": "Survival Status",
            "4": "Survival Status",
            "5": "Survival Status",
            "6": "Survival Status",
            "7": "Survival Status",
            "8": "Survival Status",
            "9": "Survival Status",
            "10": "Survival Status",
            "11": "Survival Status",
            "12": "Survival Status",
            "13": "Survival Status",
            "14": "Survival Status",
            "15": "Survival Status",
            "16": "Survival Status",
            "17": "Survival Status",
            "18": "Survival Status",
            "19": "Survival Status",
            "20": "Survival Status",
            "21": "Survival Status",
            "22": "Survival Status",
            "23": "Survival Status",
            "24": "Survival Status",
            "25": "Survival Status",
            "26": "Survival Status",
            "27": "Survival Status",
        },
        "SSORRES": {
            "0": "ALIVE",
            "1": "DEAD",
            "2": "ALIVE",
            "3": "DEAD",
            "4": "ALIVE",
            "5": "DEAD",
            "6": "ALIVE",
            "7": "DEAD",
            "8": "ALIVE",
            "9": "DEAD",
            "10": "ALIVE",
            "11": "DEAD",
            "12": "ALIVE",
            "13": "DEAD",
            "14": "ALIVE",
            "15": "DEAD",
            "16": "ALIVE",
            "17": "DEAD",
            "18": "ALIVE",
            "19": "DEAD",
            "20": "ALIVE",
            "21": "DEAD",
            "22": "ALIVE",
            "23": "DEAD",
            "24": "ALIVE",
            "25": "DEAD",
            "26": "ALIVE",
            "27": "DEAD",
        },
        "SSSTRESC": {
            "0": "ALIVE",
            "1": "DEAD",
            "2": "ALIVE",
            "3": "DEAD",
            "4": "ALIVE",
            "5": "DEAD",
            "6": "ALIVE",
            "7": "DEAD",
            "8": "ALIVE",
            "9": "DEAD",
            "10": "ALIVE",
            "11": "DEAD",
            "12": "ALIVE",
            "13": "DEAD",
            "14": "ALIVE",
            "15": "DEAD",
            "16": "ALIVE",
            "17": "DEAD",
            "18": "ALIVE",
            "19": "DEAD",
            "20": "ALIVE",
            "21": "DEAD",
            "22": "ALIVE",
            "23": "DEAD",
            "24": "ALIVE",
            "25": "DEAD",
            "26": "ALIVE",
            "27": "DEAD",
        },
        SOURCE_FILENAME: {
            "0": "ss11.xpt",
            "1": "ss11.xpt",
            "2": "ss11.xpt",
            "3": "ss11.xpt",
            "4": "ss11.xpt",
            "5": "ss11.xpt",
            "6": "ss11.xpt",
            "7": "ss11.xpt",
            "8": "ss11.xpt",
            "9": "ss11.xpt",
            "10": "ss11.xpt",
            "11": "ss11.xpt",
            "12": "ss11.xpt",
            "13": "ss11.xpt",
            "14": "ss12.xpt",
            "15": "ss12.xpt",
            "16": "ss12.xpt",
            "17": "ss12.xpt",
            "18": "ss12.xpt",
            "19": "ss12.xpt",
            "20": "ss12.xpt",
            "21": "ss12.xpt",
            "22": "ss12.xpt",
            "23": "ss12.xpt",
            "24": "ss12.xpt",
            "25": "ss12.xpt",
            "26": "ss12.xpt",
            "27": "ss12.xpt",
        },
        SOURCE_ROW_NUMBER: {
            "0": 1,
            "1": 2,
            "2": 3,
            "3": 4,
            "4": 5,
            "5": 6,
            "6": 7,
            "7": 8,
            "8": 9,
            "9": 10,
            "10": 11,
            "11": 12,
            "12": 13,
            "13": 14,
            "14": 1,
            "15": 2,
            "16": 3,
            "17": 4,
            "18": 5,
            "19": 6,
            "20": 7,
            "21": 8,
            "22": 9,
            "23": 10,
            "24": 11,
            "25": 12,
            "26": 13,
            "27": 14,
        },
    }
    expected_df = pd.DataFrame.from_dict(expected_output, orient="columns")
    expected_df.index = pd.RangeIndex(start=0, stop=len(expected_df), step=1)
    expected = PandasDataset(expected_df)
    result = ContentsDatasetBuilder(
        rule=rule,
        data_service=DummyDataService(
            MagicMock(), MagicMock(), MagicMock(), data=datasets
        ),
        cache_service=None,
        rule_processor=processor,
        data_processor=None,
        dataset_path="",
        datasets=datasets,
        dataset_metadata=DummyDataset(test_data.get("datasets", {})[0]),
        define_xml_path=None,
        standard="sdtmig",
        standard_version="3-4",
        standard_substandard=None,
        library_metadata=LibraryMetadataContainer(),
    ).get_dataset()
    assert result.equals(expected)

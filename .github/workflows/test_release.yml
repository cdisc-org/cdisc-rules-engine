name: Test Release CORE Rules Engine

on:
  workflow_dispatch:

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            name: "core-ubuntu-latest"
          - os: "ubuntu-20.04"
            name: "core-ubuntu-20-04"
          - os: "macos-latest"
            name: "core-mac"
          - os: "windows-latest"
            name: "core-windows"
    uses: ./.github/workflows/build-binary.yml
    with:
      os: ${{ matrix.os }}
      name: ${{ matrix.name }}

  create-release-assets:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create individual release zip files
        uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-ubuntu-latest/
          dest: core-ubuntu-latest.zip
      - uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-ubuntu-20-04/
          dest: core-ubuntu-20-04.zip
      - uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-mac/
          dest: core-mac.zip
      - uses: vimtor/action-zip@v1
        with:
          files: artifacts/core-windows/
          dest: core-windows.zip
      - name: Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            core-ubuntu-latest.zip
            core-ubuntu-20-04.zip
            core-mac.zip
            core-windows.zip

  deploy-to-testpypi:
    needs: create-release-assets
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download binary releases
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: binary-releases

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install -r requirements.txt

      - name: Create releases directory inside package
        run: |
          mkdir -p core_rules_engine/releases
          cp binary-releases/*.zip core_rules_engine/releases/
          ls -la core_rules_engine/releases/

      - name: Generate test version number
        run: |
          # Get current date in YYYYMMDD format
          DATE=$(date +%Y%m%d)
          # Get current time in HHMM format
          TIME=$(date +%H%M)
          # Generate version for test: 0.0.dev{date}.{time}
          TEST_VERSION="0.0.dev${DATE}.${TIME}"
          echo "Generated test version: $TEST_VERSION"
          echo "TEST_VERSION=$TEST_VERSION" >> $GITHUB_ENV

          # Update version in version.py
          echo "__version__ = \"$TEST_VERSION\"" > version.py

      - name: Verify package resources
        run: |
          # Check that required directories exist
          for dir in "core_rules_engine/resources/cache" "core_rules_engine/resources/templates" "core_rules_engine/resources/schema"; do
            if [ ! -d "$dir" ]; then
              echo "WARNING: Directory $dir does not exist. Creating it..."
              mkdir -p "$dir"
            else
              echo "âœ“ Directory $dir exists"
              ls -la "$dir" || echo "Could not list contents"
            fi
          done

      - name: Build package
        run: python -m build

      - name: Check package contents
        run: |
          # List contents of the built package to verify binaries and resources
          echo "Listing wheel contents:"
          pip install wheel
          unzip -l dist/*.whl | grep -E "resources|releases"

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

      - name: Verify installation from TestPyPI
        run: |
          # Wait for TestPyPI to process the upload
          echo "Waiting for TestPyPI to process the package..."
          sleep 30

          # Try to install from TestPyPI
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "core-rules-engine==$TEST_VERSION" || echo "Installation verification skipped - package might not be available yet"

          # Verify it installed correctly if possible
          if pip list | grep "core-rules-engine"; then
            echo "Package installed successfully!"
            # Try importing it
            python -c "import core_rules_engine; print('Import successful')" || echo "Import failed but package was installed"
          else
            echo "Package installation couldn't be verified."
          fi
